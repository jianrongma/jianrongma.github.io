<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on think hy how to learn</title>
    <link>https://linjianshu.github.io/tags/.net/</link>
    <description>Recent content in .Net on think hy how to learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Jan 2021 00:17:57 +0800</lastBuildDate><atom:link href="https://linjianshu.github.io/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>真会CSharp吗学习文档</title>
      <link>https://linjianshu.github.io/p/%E7%9C%9F%E4%BC%9Acsharp%E5%90%97%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 30 Jan 2021 00:17:57 +0800</pubDate>
      
      <guid>https://linjianshu.github.io/p/%E7%9C%9F%E4%BC%9Acsharp%E5%90%97%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>C#5.0+学习文档 特点：
通用性语言 类型安全 面向对象 目标：生产力
简洁性 表达力 高性能 平台中立，与平台无关
封装、继承、多态
统一的类型系统：
类型 共同的基类 类和接口
class interface 属性property、方法method和事件event
唯一一种函数成员(Function Member):方法(method)
方法还包括：属性(Property)和事件(Event)还有其他的
属性
事件
C#主要是一种面向对象的语言，但是也借用了不少函数式编程的特性
函数可以当做值来对待
委托Delegate 支持纯(purity)模式
避免使用值可变的变量 类型安全
c#主要来说是类型安全的 静态类型 static typing 动态类型 dynamic 强类型 strongly typed language 内存管理
依赖于运行时来执行自动内存管理 CLR:Common Language Runtime (公共语言运行时) GC： Garbage Collector (垃圾收集器) c#没有消灭指针 通常情况下不需要使用指针 unsafe 平台支持
原来c#主要是在window上面运行
现在可以在所有的平台上运行
windows macs linux ios android &amp;hellip; .Net Core
.Net/.Net Core 的核心就是CLR: Comman Language Runtime
CLR和语言无关</description>
    </item>
    
  </channel>
</rss>
