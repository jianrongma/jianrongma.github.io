<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>-计算机基础 on think hy how to learn</title>
    <link>https://jianrongma.github.io/categories/-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in -计算机基础 on think hy how to learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Apr 2022 00:26:49 +0800</lastBuildDate><atom:link href="https://jianrongma.github.io/categories/-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机组成原理学习文档</title>
      <link>https://jianrongma.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 14 Apr 2022 00:26:49 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>计算机组成原理学习文档 CPU
内存
硬盘
主板
计算机硬件识别数据
高低电平0/1
通过电信号传递数据
金属针脚：传递电信号用的通道
通过很多条电路，可以传递多个二进制数位，每个二进制数位称为1bit比特
文字、数字、图像如何用二进制表示
如何存储二进制数
CPU如何对二进制数字进行加减乘除
如何从内存中取出想要的数据
CPU如何识别和执行我们写的程序
计算机系统 = 硬件 + 软件
硬件是计算机的实体，软件由具有各类特殊功能的程序组成
计算机性能的好坏取决于软硬件功能的总和
软件
系统软件：用来管理整个计算机系统
操作系统、DBMS、标准程序库、网络软件、语言处理程序、服务程序 应用软件
按照任务需要编制成的各种程序 硬件的发展
第一台电子数字计算机 ENIAC1946 冯诺依曼
逻辑元件：电子管
第一代：电子管时代 纸带机编程
第二代：晶体管 开始出现操作系统 开始出现高级语言
第三代：中小规模集成电路 高级语言迅速发展 开始出现分时操作系统
第四代：大规模、超大规模集成电路 出现微处理器、微型计算机、个人计算机PC萌芽 、 操作系统
微处理器的发展：
机器字长：计算机一次整数运算所能处理的二进制位数
摩尔定律：揭示了信息技术进步的速度，集成电路上可容纳的晶体管数目，约每隔18个月就会增加一倍，整体性能也将提升一倍
软件的发展：
机器语言010101=&amp;gt;汇编语言=&amp;gt;FORTRAN/PASCAL/C++=&amp;gt;java、python
DOC操作系统=&amp;gt;windows、android、ios
目前的发展趋势：
两极分化：
1.微型计算机更微型化、网络化、高性能、多用途方向发展
2.巨型化、超高速、并行处理、智能化方向发展
计算机硬件的基本组成：
1.早期冯诺依曼的结构
2.现代计算机的结构
ENIAC手动接线来控制计算
冯诺依曼：”存储程序“的概念是指将指令以二进制代码的形式事先输入计算机的主存储器（内存），然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。
早期冯诺依曼机：
数据/程序：即软件
硬件：
输入设备：将信息转换成机器能识别的形式
存储器：存放数据和程序
运算器：算术运算和逻辑运算
控制器：指挥程序运行
输出设备：将结果转换成人们熟悉的形式
在计算机系统中，软件和硬件在逻辑上是等效的。
冯诺依曼计算机的特点：
计算机由5大部件组成：输入设备、输出设备、存储器、运算器、控制器 指令和数据以同等地位存储于存储器，可按地址寻访 指令和数据用二进制表示 指令由操作码和地址码组成 存储程序 以运算器为中心 输入/输出设备与存储器之间的数据传送通过运算器完成</description>
    </item>
    
    <item>
      <title>leetBook_冲刺攻略</title>
      <link>https://jianrongma.github.io/p/leetbook_%E5%86%B2%E5%88%BA%E6%94%BB%E7%95%A5/</link>
      <pubDate>Mon, 28 Feb 2022 12:11:37 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/leetbook_%E5%86%B2%E5%88%BA%E6%94%BB%E7%95%A5/</guid>
      <description>leetBook_冲刺攻略 image-20220227100312893根据提示的数据范围推定时间复杂度 根据时间复杂度推定算法集合 根据题目特征确定算法
image-20220227100007364没有给出数据范围通常使用枚举 枚举通常是n~nlog(n)的时间复杂度 然后再确定算法集合
image-20220227100056863image-20220228103152097image-20220228103157567</description>
    </item>
    
    <item>
      <title>数据结构与算法学习文档</title>
      <link>https://jianrongma.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sun, 30 Jan 2022 00:22:19 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>数据结构与算法 解决问题方法的效率，跟数据的组织方式有关。
循环和递归
解决问题方法的效率，跟空间的利用效率有关。
image-20210818161452286image-20210818162018882解决问题方法的效率，跟算法的巧妙程度有关
数据结构 数据对象在计算机中的组织方式
逻辑结构：线性结构和树结构、图结构 物理存储结构：数组、链表 数据对象必定与一系列加在其上的操作相关联
完成这些操作所用的方法就是算法
抽象数据类型(Abstract Data Type) 数据类型 数据对象集 数据集合相关联的操作集 抽象：描述数据类型的方法不依赖于具体实现 与存放数据的机器无关 与数据存储的物理结构无关 与实现操作的算法和编程语言均无关 只描述数据对象集和相关操作集是什么，并不涉及如何做到的问题
抽象 image-20210818163548512算法 一个有限指令集 接收一些输入（有些情况下不需要输入） 产生输出 一定在有限步骤之后终止 每一条指令必须 有充分明确的目标，不可以有歧义 计算机能处理的范围之内 描述应不依赖与任何一种计算机语言以及具体的实现手段 image-20210818164049310什么是好算法 空间复杂度sn 根据算法写成的程序在执行时占用存储单元的长度。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。
时间复杂度Tn 根据算法写成的程序在执行时耗费时间的长度。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之年都等不到运行结果。
递归的时候会占用内存，因为递归下一层的时候要暂存上一层的结果
Sn = C*N
image-20210818164648695加减比乘除算的快
image-20210818164842726在分析一般算法的效率时，我们经常关注下面两种复杂度
最坏情况复杂度T worst(n) 平均复杂度T avg(n) 基本上就是第一种：最坏情况复杂度
image-20210818165255964image-20210818165445992image-20210818165457903image-20210818165643710image-20210818165759487image-20210818191956566image-20210818193405280image-20210818193945679image-20210818194726647什么是线性表 多项式表示问题的启示 同一个问题可以有不同的表示（存储）方法 有一类共性问题：有序线性序列的组织和管理 线性表 由同类型数据元素构成有序序列的线性结构
表中元素个数成为线性表的长度 线性表没有元素时，称为空表 表起始位置称表头，表结束位置称表尾 image-20210818195144256链式存储实现</description>
    </item>
    
  </channel>
</rss>
