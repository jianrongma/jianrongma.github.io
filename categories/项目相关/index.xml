<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目相关 on think hy how to learn</title>
    <link>https://linjianshu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/</link>
    <description>Recent content in 项目相关 on think hy how to learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Oct 1999 23:44:44 +0800</lastBuildDate><atom:link href="https://linjianshu.github.io/categories/%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零搭建微服务框架嗷</title>
      <link>https://linjianshu.github.io/p/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%97%B7/</link>
      <pubDate>Sun, 10 Oct 1999 23:44:44 +0800</pubDate>
      
      <guid>https://linjianshu.github.io/p/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%97%B7/</guid>
      <description>从零搭建微服务框架嗷 新建webapi项目
image-20201026181939602新建student控制器，测试运行
image-20201026182245668image-20201026182254921添加新项目控制台应用程序，加入model类
image-20201026182407678image-20201026182436593image-20201026182536295删除program.cs文件，右键属性，修改输出类型为“类库”
image-20201026182552213继续新建项目，interface，作为服务的接口
image-20201026183008099删除program.cs文件，继续修改属性为类库
定义完了接口，接下来应该定义实现接口的具体服务了，新建控制台应用程序
编写DBhelper类，原生连接数据库
添加StudentService实现类，继承IStudentService，实现它未实现的方法
image-20201026183509062image-20201026183523894依然重复上述步骤，右键属性，修改输出类型为类库
测试，以上依然是个单体结构，只不过分层了，现在我们搭了基层结构如图：
image-20201026183657453分别为，webapi，接口，模型层，接口实现类
接下来修改webapi内student控制层里的方法，尝试调用通过接口调用服务，进而获取数据库中的数据
修改前：
image-20201026183803906修改后：
先在startup.cs中进行服务类的依赖注入
image-20201026184259317在这里，我们对controller进行重新构造：
定义一个私有只读IStudentService接口 ；
在构造函数里为它赋值
在GetAllStu方法里进行调用
image-20201026184627518启动试试，输入url
image-20201026184827682不错不错
接下来我们要添加服务实例，将原来的单体应用程序，模拟拆分成分布式应用程序
新建项目，新建webapi
image-20201026185004596新建新的控制器，为了和上面的student控制器区分，且，我们要知道，最后上面将作为客户端，调用我们现在正在搭建的服务实例，这个项目，所以真正会和接口、服务、数据库打交道的应该在我们现在搭建的这个控制器里面，在这里我取名为StuImplController控制器。
image-20201026185242569在这里面，复制之前的studentcontroller里的内容，作为真正调用的源头
image-20201026185405390同时，别忘记了，要正常使用，记得在该项目内startup.cs中增加依赖注入image-20201026185548164修改启动项目为该服务实例，我们先试试看能不能跑
image-20201026190458520nice
接下来我们做分布式应用程序：我们希望LjsMicroServiceReviewDemo通过ServiceInstance去调用，这样子，前者就可以作为客户端，后者就可以作为服务端，因为是进程间通信，虽然在一台电脑上跑，但是可以理解为是利用网络架起的桥梁，进行分布式应用的部署和调用。
这时候记录一下网址
http://localhost:42464/api/StuImpl/GetAllStu
image-20201026190938569在客户端，写一个调用方法，调用刚刚的网址嘿嘿
同时启动两个项目，让他搞去吧
image-20201026191036770image-20201026191232782爽爆了！
但是还不够，我们知道，一般情况下，服务器里怎么可能只有一个服务实例在跑呢，那双十一不是炸裂，所以这时候会有很多实例在跑才对，例如两个、三个相同的实例一起运行，同时对外提供服务才对。
我们要使用命令行运行服务实例，并且赋予相应的端口号
image-20201026193900248image-20201026194428606image-20201026194845947在地址栏敲cmd
image-20201026194856720image-20201026194903514image-20201026194909623开启三个服务实例，端口为5726、5727、5728</description>
    </item>
    
  </channel>
</rss>
