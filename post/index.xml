<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on think hy how to learn</title>
    <link>https://jianrongma.github.io/post/</link>
    <description>Recent content in Posts on think hy how to learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Apr 2024 23:47:37 +0800</lastBuildDate><atom:link href="https://jianrongma.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PythonLearning</title>
      <link>https://jianrongma.github.io/p/pythonlearning/</link>
      <pubDate>Wed, 10 Apr 2024 23:47:37 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/pythonlearning/</guid>
      <description>Python学习 第一章 一个基本的原理：计算机只认识二进制，即：0和1 img什么是编程语言 用于人类和计算机进行交流的一种专有领域语言，通过编写编程语言的代码，去指挥计算机工作。但它无法直接和计算机沟通，需要翻译工具（解释器****或编译器）将代码翻译成二进制，提交计算机执行，从而实现和计算机的顺畅沟通。
img注 IDE 集成开发环境，是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如Visual Studio&amp;hellip;&amp;hellip;
Python解释器 一个基本的原理是：计算机只认识二进制，即0和1 其实，计算机是不会认识Python代码的，但是Python有解释器程序，如下图
img安装Python环境，本质上，就是在电脑中安装：Python解释器程序
代码随时写，但是能不能运行，就要看电脑里有没有解释器程序了
Python解释器，是一个计算机程序，用来翻译Python代码，并提交给计算机执行
功能： 翻译代码为计算机认识的二进制（0和1）的形式并提交给计算机执行； 在解释器环境内可以一行行的执行我们输入的代码； 也可以使用解释器程序，去执行代码文件 解释器存放位置 &amp;lt;Python安装目录&amp;gt;/python.exe
img我们在CMD（命令提示符）程序内，执行的python，就是上图的python.exe程序
img不使用解释器，计算机就不认识Python代码
img使用Python解释器程序，就能执行Python代码了
img思考 在python解释器程序内，写完一行代码并回车后，会直接运行他
如何一次性运行好多行代码？ 可以将代码，写入一个以”.py”结尾的文件中，使用python命令去运行它
如，在Windows系统的某盘，新建一个名为：test.py 的文件，通过记事本程序打开，输入如下内容：
img在“命令提示符”程序内，使用python命令，运行，如图：
img第一个Python程序 print(&amp;ldquo;Hello World!!!&amp;rdquo;)
含义：向屏幕上输出(显示)，Hello World!!!
注 括号和引号都是英文状态下输入
打开CMD（命令提示符）程序，输入Python并回车 然后，在里面输入代码回车即可立即执行
img练习 请在“命令提示符”（CMD）程序内，通过Python，向屏幕上输出：零基础，学Python，月薪过万，就来黑马程序员
img常见问题 找不到“命令提示符”程序在哪里 使用快捷键：win + r 打开运行框，输入cmd后回车即可打开命令提示符程序
命令提示符内，输入python出现：&amp;lsquo;python&amp;rsquo; 不是内部或外部命令，也不是可运行的程序或批处理文件 img是因为在安装python的时候，没有勾选 add python 3.10 to PATH的选项
img卸载Python，重新安装python，勾选这个选项。 然后重新打开命令提示符程序，即可</description>
    </item>
    
    <item>
      <title>Order_Priority</title>
      <link>https://jianrongma.github.io/p/order_priority/</link>
      <pubDate>Thu, 10 Aug 2023 23:57:10 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/order_priority/</guid>
      <description>资源约束/生产能力不确定+订单优先级相关文献
基于优先级的柔性车间调度算法 Research on Priority-based Flexible Job Shop Scheduling Algorithm
研究对象 航空发动机制造过程中的柔性作业车间调度问题
柔性作业车间调度问题（FJSP）定义 在一个加工过程中，工件的集合W（W1,W2,W3,&amp;hellip;&amp;hellip;.)在一组机器M（M1,M2,M3,&amp;hellip;..）上加工，每道工序可由一台或多台机床加工，且满足以下约束条件：(1)机床一次只能加工一个工件。(2)工件一次只能用一台机器加工。(3)工件必须按照工艺规定的顺序加工。(4)不得中断进程。(5)不同工件、不同工艺之间不相互干扰。(6)优先考虑具有强制交付节点的工件。当工件在交付期之前完成时，会产生存储和维护费用，当工件在交付期之后完成，则无法按期交付，建立了评价函数如下：
imge 是逾期工件的评估权重，a 是提前交付工件的评估权重，l 为工件完成时间，d 为工件交付时间。调度目标是获得评价函数的最小值。
解决了什么问题 当前车间作业调度过程中存在订单强制节点（一些重要的订单必须在某个时间点准时交付，这往往会影响车间调度结果的质量）、设备选择等真实需求。
研究现状 现有的分支定界法[9]、整数规划法[10]、遗传算法[11]、禁止搜索[12]等算法在设备选型过程中没有考虑到加工工艺是否存在强制交货时间，也没有根据设备负荷对加工工艺进行进一步优化。
研究方法 根据工件的优先级和加工过程中设备的负荷，分两个阶段解决柔性车间作业调度问题。第一阶段：确定当前要加工的工件，第二阶段：确定用于加工该工件的设备。
设计了一种人工干预的订单优先级计算方法：引入强制交货节点提出优先级计算函数 准确衡量订单溢出的风险，其中计算出的订单优先级越大，该订单溢出的风险越大。同时，决策者能够提前为强制节点订单设置优先级，从而确保强制节点订单在优先级的基础上得到处理
img改进了应用于机加工过程的层次分析方法 设计了一种基于层次分析法的设备选型方法。该方法可以对每台机器进行综合评价，从而选择最合适的机器，达到提高调度效率的目的；
基于矩阵构造方法[13]、作业调度和设备负荷满足一致性检验的信息，改进了层次分析法。改进的层次分析法可以自动构造满足一致性检验的比较矩阵。
设备最早可以开始加工的点 C1，越早，工件逾期的概率越低，优先选择C1小的设备； 设备上的总负荷 C2，越大，工件等待的概率越大，超限的概率也越大，优先选择C2小的设备； 设备上所有工件可以加工的总时长 C3，越大，该设备的资源竞争概率越大(两个工件在同一时间段内需要同一台机器加工)，工件超限的概率越大，优先选择较C3小的设备。 贡献 实验表明，所提出的车间作业调度算法有效地提高了车间作业调度结果的质量
与现有算法相比，本文提出的求解算法是有效的，保证了强制节点工件在评价值最小化的情况下按时交付，既保证了工件完成率，又显著降低了库存，提高了企业的生产率和资金流动性。
客户订单优先级的决策框架建议：一家结构钢公司的案例研究 A decision framework proposal for customer order prioritization: A case study for a structural steel company
当目前被授予的项目开始覆盖公司的大部分设计和制造能力时，公司面临着选择下一个客户订单来合理分配剩余稀缺能力的决策问题。
由于钢结构行业的性质，绝大多数的工作，近90%，是在设计和制造阶段完成的;剩下的10%是用非常少的工艺完成的安装
表 1 评估标准
标准 解释 单位时间的潜在利润率 考虑一定时期内利润的潜在利润率 潜在订单与可用容量的兼容性 潜在订单在公司有限产能方面的适用性水平 利润更高的潜在未来订单水平 接受比考虑中的需求更有利可图的未来需求的可能性水平 未来商机的客户信用 成为制造公司忠实客户的水平 订单生产计划的可协商性级别 项目在项目进度方面的灵活性水平 利润最大化是企业营利性的强制性目标。与利润率较低但运营时间较短的订单相比，利润率较高但运营时间较长的订单可能无利可图。因此，可以定义&amp;quot;单位时间****潜在利润率&amp;ldquo;代替总利润作为订单优先级决策的评价标准。</description>
    </item>
    
    <item>
      <title>行为认知测评技巧</title>
      <link>https://jianrongma.github.io/p/%E8%A1%8C%E4%B8%BA%E8%AE%A4%E7%9F%A5%E6%B5%8B%E8%AF%84%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 23 Jul 2023 11:52:38 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E8%A1%8C%E4%B8%BA%E8%AE%A4%E7%9F%A5%E6%B5%8B%E8%AF%84%E6%8A%80%E5%B7%A7/</guid>
      <description>数字规律题 标序列号 把变量和序列号放在一起比较看看 公因式法 找出最小公因式 看看有无规律 对每一位数减去第一位数 替换掉第2&amp;hellip;.位 结合上面的看看有无规律 对每一位数同时加上/乘以/除以第一位数 结合上面看看有无规律 同时除以1/2/3 加法和减法可能性稍大 能否分成奇数和偶数数组 看增幅 是否有规律 +1 +2 +4 +8 等比或者等差 前两个和/积是后一个 类斐波那契数列 前一个数是后一个数的比例关系 图形推理题 是否间隔排列或者对称排列 寻找共同特征 顺时针/逆时针 变化 白*黑=白 重合的题目 对称与不对称 轴对称与中心对称 切割三角形 相交相切 一全一半 叠加 求同存异 相对位置 内部还是外部 </description>
    </item>
    
    <item>
      <title>面试薄弱复习</title>
      <link>https://jianrongma.github.io/p/%E9%9D%A2%E8%AF%95%E8%96%84%E5%BC%B1%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Tue, 18 Jul 2023 16:34:40 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E9%9D%A2%E8%AF%95%E8%96%84%E5%BC%B1%E5%A4%8D%E4%B9%A0/</guid>
      <description> 算法
树 平衡二叉树 镜像二叉树 最低公共祖先 前序后续便利构造二叉树 节点和等于整数的路径 两个节点的最长距离 二叉查找树 链表 奇升偶降 如何有序 数组 二维数组旋转90° 2sum问题 位运算 动态规划 背包问题 0-1 背包问题 完全 排序 复杂度 冒泡 插入 归并 快排 希尔 堆排序 基数排序 桶排序 如何求中位数 大根堆与小根堆 优先队列 单调栈 单调队列 接雨水 最大矩形 滑动窗口 二分 DFS BFS 递归 回溯 LRU 辅助栈 并查集 堆栈
内存中的堆、栈、静态区 </description>
    </item>
    
    <item>
      <title>论文阅读</title>
      <link>https://jianrongma.github.io/p/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</link>
      <pubDate>Sun, 07 May 2023 23:34:19 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</guid>
      <description>1.供应链环境下基于Kriging模型的订单优先级评估 2021SCIQ2 IEEE Access Order Priority Evaluation Based on Kriging Model Under Supply Chain Environment
关键词 order production priority;supply chain;make-to-order;Kriging model
摘要 供应链环境下，传统的方法具有局限性； &amp;mdash;- 有哪些局限性？
建立了供应链环境下订单生产优先级的评价指标体系；
提出了基于Kriging模型的订单生产优先级评价模型来确定订单生产优先级。
结果表明，该模型适用于小样本问题，**（什么是小样本问题？）**是一个可行、有效的订单优先级评估模型；
与其他模型相比**（与其他哪些模型相比？），该模型提高了订单优先级的评估精度**。同时，该模型具有较高的可靠性和稳定性，扩充了订单生产优先级的计算方法。
I.引言 第一段 对于按订单生产的企业来说，如何处理订单是生产调度中的一个关键问题。良好的订单处理速度和准确性不仅可以为客户提供更好的服务，还可以节省流动资金，降低成本。
[1-3]
探讨了按订单制造企业的订单接受和调度问题
对核心供应商的订单进行选择和维护
[4-6]
对供应链环境下的订单处理进行了大量的研究工作
[7]
因此，需要确定接受哪些订单，按照什么顺序进行处理，而如何确定订单生产优先级是订单处理的关键步骤
另一方面，次序优先问题是一个复杂而关键的过程，是多种标准可能相互冲突的结果。因此，不同的研究采用了理论、实践和建模等多种方法和技术来解决顺序优先级的确定问题。
第二段 研究序求值问题的方法有很多。
首先，提出一些传统方法 [8]
使用混合整数线性规划(MILP)和包括遗传算法在内的各种启发式方法来解决订单接受问题
[9]
提出了一个混合整数规划公式，并使用数值分析来研究同时定价、订单接受、调度和提前期决策
[10]
利用层次分析法(AHP)的多属性专家支持系统对买方订单进行评估
[11]
将Dempster-Shafer理论与信念熵相结合，提出了一种新的证据模糊多准则决策方法(EFMCDM)来确定最优方案
[12]
提出了Atanassov型直觉模糊集来确定供给选择和排序
[13]
提出了一种基于模糊数的层次分析法
[14]
综合考虑了生产策略、约束理论和线性规划，提出了生产策略和生产调度相结合的综合方法
总结传统方法的不足 这些方法从不同的角度讨论了订单优先级（跟订单优先级的关联在？），可以有效地**帮助制造商解决供应商排序中的多标准决策问题。**线性规划假设顺序优先级与其影响因素之间存在线性关系。实际上，订单优先级评价模型受多种因素影响，不能进行非线性推广。AHP的优点是为决策问题提供了一个结构化但相对简单的解决方案，但它严重依赖于人类对知识和经验的判断[15]。
近年来，神经网络模型和支持向量机(SVM)等机器学习[16]-[18]因其相对于传统方法能够处理复杂性和不确定性而得到了广泛的应用 在介绍每种算法的同时就指出了其缺点，不适合于处理订单优先级问题 [19-21]
采用支持向量机处理质量监控、质量评估。但是，Oh也指出，传统的SVM没有考虑到明确的缺陷类型和保修费用。此外，SVM的泛化能力很大程度上取决于参数的选择，选择参数[21]需要大量的计算。
泛化能力：指的是机器学习算法对新鲜样本的适应能力 [22-24]
提出了基于径向基函数(RBF)神经网络的非线性订单优先级评价模型
总结其优缺点：
优点：
提高了评价精度； 不需要复杂的工艺决策，只依赖历史数据。 缺点：</description>
    </item>
    
    <item>
      <title>智能优化算法笔记</title>
      <link>https://jianrongma.github.io/p/%E6%99%BA%E8%83%BD%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 25 Dec 2022 10:46:00 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E6%99%BA%E8%83%BD%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</guid>
      <description>智能优化混合算法是一种以某类优化算法为基础,融合其他智能算法或理论的混合算法,可用于求解各种工程问题最优解.
智能算法在工程领域(如系统控制、生产调度、人工智能、模式识别等)的迅速推广和应用，作为一个重要的科学分支，智能优化算法激励人们从更广泛的生物或自然现象寻求启发，以构造新的只能算法或对算法不断地进行改进，从而更好地解决工程中存在的多数复杂问题。优势主要表现在：
算法原理简单，易于推广和应用 良好的算法收敛性和搜索速度，优化问题较易取得满意结果 Chapter1 绪论
智能优化算法即一种按照某规则或思想进行的搜索过程，用以得到满足用户要求的问题的解。
遗传算法于1975年由美国密歇根大学的J.Holland教授等人受生物进化论的启发而提出[1]。遗传算法是以自然界中的生物进化过程为背景，将生物进化过程中的繁殖、选择、杂交、变异和竞争等概念引入算法中。它的基本思想来源于自然界中的生物从低级、简单，发展到高级、复杂，乃至进化成人类这样的一个漫长进化过程，并借鉴了达尔文提出的物竞天择、优胜劣汰、适者生存的自然法则。遗传算法的本质是一种对问题进行高效全局搜索的方法，它在搜索过程中有效的利用已有信息来自动获取和积累有关搜索空间的知识，并自适应地控制搜索方向使其最终走向最优解。
遗传算法已经在数据挖掘、生产调度、图像处理以及函数优化等领域去的了令人鼓舞的成就，证明了其良好的性能。近年来，遗传算法被应用于诸如复杂的多目标规划问题、人工生命以及神经网络问题、机器学习问题、智能控制等问题中。
自然界中的生物遗传物质的主要载体是染色体，基因是控制生物性状的遗传物质的功能单位和结构单位，是染色体的主要组成部分，即多个基因组成染色体。在染色体中，基因所占据的位置称为基因座。同一个基因座，可能有的全部基因称为等位基因。染色体的特征即生物个体的性状就是由基因和基因座决定的。与此对应染色体有两种相应的表示模式，即基因型和表现型。所谓表现形式是指生五个题外在所表现出来的性状，而基因型则是指与表现型密切相关的基因组成。同一种基因型的生物个体在不同的外在环境条件作用下可以存在不同的表现型，因此表现型是基因型与外在环境条件下相互作用的结果。染色体带有特征的实体称为个体，个体的集合就是种群。该集合内，个体数称为群体的大小。一个个体对环境的适应程度称为适应度，生物学家使用适应度这个属于来衡量某个物种将获得更多的繁殖后代的机会；而对外在生存环境适应程度较低的物种，其放置后代的机会就会相对较少，甚至逐渐走向灭绝。复制、选择、交叉和变异是自然界中的生物不断向前进化的最重要的组成部分。
自然遗传学说与人工遗传算法中所使用的基本概念和术语之间的对应关系
染色体 解的编码 基因 解中的每一个分量的特征 基因座 特性值 个体 解 种群 选定的一组解(解的个数为种群的规模) 适应度 适应度函数值 复制 根据适应度函数值选取的一组解的操作 选择 以一定概率从种群中选择若干个解的操作 交叉 通过交配原则产生一组新解的过程 变异 通过突变原则产生一组新解的过程 执行遗传算法时必须包含两个数据转换操作，一是表现型到基因型的转换，二是基因型到表现型的转换。前者是指把实际问题中的参数或解转换成遗传算法问题中的染色体或个体。这个过程定义为编码操作；后者是对前者的一个相反操作，即把遗传算法中的染色体或者个体转换为实际问题中的解或参数，这个过程叫做译码操作。当产生初始种群之后，就按照适者生存和优胜劣汰的原理，在每一代中根据每个个体的适应度函数值大小来挑选个体，并仿照自然遗传学说中的遗传算子来进行交叉和变异，并产生出代表新的解集的种群。以此类推逐代进化并产生出越来越优异的近似解，最后一代种群中的最优个体经过解码操作，就可以作为待解决问题的近似最优解。
计算开始时，先将种群随机初始化，产生出一定数目的N个个体，并计算每个个体的适应度函数值，第一代初始种群就产生了。算法按照适应度值选择个体参与交叉编译运算，父代要通过基因重组（交叉）而产生子代，所有的子代按一定概率进行变异操作，然后子代的适应度值又被重新计算，从而产生新的下一代种群。如此反复，直到满足优化准则为止。
近些年来，国内学者也发表了大量关于遗传算法的文章，如2004年，杨晓梅、曾建潮[5]为改善当时求解车间调度问题中的遗传算法的性能,提高搜索最优调度解的速度,并借鉴遗传算法的生物学基础,提出了基于多个体交叉的遗传算法。该算法在执行遗传过程中充分利用个体自身的优良性质，对不可行的调度解根据多个体修补原则进行修补改正，以此就可保证遗传后代的合法性和种群多样性，能够显著缩短最优调度解的搜索时间。在2005年，王凌、张亮[6]针对有限缓冲区的流水线调度问题,提出了一种基于多搜索模式的遗传算法,该算法使用多个交叉和变异操作来对解空间进行探索和改良,并采用面向有向图的领域结构来增强局部搜索性能。在2007年，吴尔飞、金烨等[7]针对当前研究较少的双边装配线平衡问题,研究双边装配中具有操作方位约束的任务,以及在工位上分配任务的操作顺序与平衡结果具有直接关系等特点,提出了相对应的符合该问题特性的遗传算法。该算法采用基于序列、任务机器分配方位相组合的编码方法，并改进了更加可行的交叉与变异算子，使最优解搜索过程仅在可行解的空间内进行，提高了搜索效率，节约了搜索时间。在2009年，莫巨华、黄敏、王兴伟[8]为实现系统的最优化设计，致力于研究以满足顾客满意率要求为主要约束的多目标规划，并提出了一种改进的遗传算法与过程仿真相结合的求解方法。在该求解方法中，多目标规划通过加权平均转化为单目标规划。
遗传算法是一种模拟生物界的自然选择和自然遗传机制的随机搜索算法。在遗传算法提出之前，为解决各种优化问题，许多优化算法已经被提出，例如梯度法、单纯形法、动态规划法等。这些优化算法有各自的有点，也有各自的适用范围，同时又有各自的限制因素。遗传算法与这些传统的优化算法有很大的不同，大多数古典的优化算法是对一个单一的度量函数（评估函数）进行梯度或较高次统计，然后产生一个具有确定性的试验解序列。相反，遗传算法并不依赖于梯度信息，而是通过模拟自然界的进化过程来对最优解进行搜索，它利用某种编码技术，并作用于称为染色体的数字串上，对由这些串组成的群体的进化过程进行模拟。遗传算法通过有组织地、随机地交换信息来重新组合那些适应性较好的串，生成新的串并组成群体。
遗传算法具有自组织性、自适应性和智能性。自然选择清楚了算法设计过程中的一个最大的障碍，即需要事先对问题的全部特点进行描述，并要说明针对问题的不同特点所应采取何种措施。遗传算法的这种自组织、自适应的特征，使它同时具有根据环境的变化而自动发现环境的特性和规律的能力，从而使遗传算法可以用来解决一些复杂的非结构化问题。 遗传算法具有并行性。遗传算法在种群中是按照并行方式进行搜索的，而不是在一个单点上进行寻优的，其并行性表现在两个方面： 遗传算法具有内在并行性，使它本身及其时候大规模并行，并适合在目前所有的并行机或分布式系统上进行并行的处理； 遗传算法具有内行并行性，由于它采用种群的方式来组织搜索，因此可以同时搜索解空间内的多个区域，并相互进行信息交流。许多传统的搜索方法都是从单点开始寻优的，因而在多峰函数优化中极容易陷入局部最优解。遗传算法是从一个种群开始进行搜索的，并且可以同时向不同的方向进行搜索，从而大大提高了遗传算法的全局搜索性能，并减少了陷入局部最优解的可能性。 遗传算法使用概率搜索技术。遗传算法在搜索过程中并不采用确定性规则，而采用概率的变迁规则来指引它的搜索方向，在优化过程中，使搜索的每一步都向最终结果靠近的机制或智能性称为搜索的探索性或启发性。传统搜索方法中从一个搜索点到另一个搜索点的转移有确定性的转移方法和转移关系，这种确定性也极有可能使搜索永远也达不到最优点，因而限制了算法的应用范围，制约了算法的应用效果。遗传算法以适应度数字作为标尺、以概率作为一种工具来指引搜索过程，虽然表面上看，遗传算法好像是一种盲目的搜索方法，但实际上它却是一种导向随机搜索方法。 遗传算法把决策变量的编码作为运算对象。 遗传算法直接把目标函数值作为搜索信息。传统的优化算法不仅需要利用目标函数值，并且还需要目标函数的导数值等其他一些辅助信息才能最终确定下一步的搜索方向和搜索范围，无需使用目标函数的导数值及其他一些辅助信息。这个特性使得遗传算法在很多目标函数无法求导或很难求导的优化问题，以及组合优化问题等应用中比较方便，因为它消除了导数求导这个障碍。另外，直接利用目标函数值或个体适应度值，也可使我们把搜索范围集中到适应度较高的那部分搜索空间中，从而大大提高了搜索的效率，节省了搜索时间。 </description>
    </item>
    
    <item>
      <title>FineBInote</title>
      <link>https://jianrongma.github.io/p/finebinote/</link>
      <pubDate>Sat, 10 Dec 2022 23:27:40 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/finebinote/</guid>
      <description>帆软FineReport笔记 帆软官网： [FineReport报表 - 专业的企业级Web报表工具](
学习计划表：https://bbs.fanruan.com/thread-77147-1-1.html
数据决策系统 (finereport.com)
FineReport V10.0新手入门 - 视频课 - 帆软学院 (fanruan.com)
28课时，3h49分；
FineReport帮助文档 - 全面的报表使用教程和学习资料 (fanruan.com)
视频课 - 帆软学院 (fanruan.com)
新手入门视频：层次坐标-10‘40，动态格间运算
超级链接；
决策报表入门示例；快速搭建大屏
Tomcat部署包的下载
各种例子；
问题1：！！！SQL Server数据库连接常见错误（帆软文档）—https://help.fanruan.com/finereport/doc-view-306.html
问题所在：让sqlserver支持以ip作为服务器名称，然后用sa用户名和密码登录服务器——https://blog.csdn.net/qq_42636010/article/details/89344993
sqlserver身份验证登录如何设置：https://jingyan.baidu.com/article/0a52e3f4e0d6a6bf62ed7232.html
SQL数据库、帆软自带的数据库属于模板数据集还是服务器数据集
报表：普通报表；填报报表；决策报表
一般 X 轴表示分类，系列表示图例，Y 轴表示分类下系列的值。
当查询结果为空值/NULL时，如何在报表中显示为0？
数据形态&amp;mdash;公式形态&amp;ndash;if($$$=null,0,$$$)
超级链接&amp;ndash;当前报表决策 report0 &amp;mdash;&amp;ndash; &amp;gt; report1 超级链接-当前决策报表对象
添加参数p 值的公式为$$$ 用户点击 report0 中的哪个订单ID 就将该ID作为参数传递给 report1
report1 在接收到 report0 的参数后 希望只对该参数对应的订单展示相关信息 设置对应的过滤条件
随着标题联动
塑胶部-生产线-三十天的产能
逻辑：
产能统计获取事业部与生产线参数
产能趋势分析图标题接收参数
趋势图折现趋势根据对应标题展示对应信息</description>
    </item>
    
    <item>
      <title>计算机组成原理学习文档</title>
      <link>https://jianrongma.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 14 Apr 2022 00:26:49 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>计算机组成原理学习文档 CPU
内存
硬盘
主板
计算机硬件识别数据
高低电平0/1
通过电信号传递数据
金属针脚：传递电信号用的通道
通过很多条电路，可以传递多个二进制数位，每个二进制数位称为1bit比特
文字、数字、图像如何用二进制表示
如何存储二进制数
CPU如何对二进制数字进行加减乘除
如何从内存中取出想要的数据
CPU如何识别和执行我们写的程序
计算机系统 = 硬件 + 软件
硬件是计算机的实体，软件由具有各类特殊功能的程序组成
计算机性能的好坏取决于软硬件功能的总和
软件
系统软件：用来管理整个计算机系统
操作系统、DBMS、标准程序库、网络软件、语言处理程序、服务程序 应用软件
按照任务需要编制成的各种程序 硬件的发展
第一台电子数字计算机 ENIAC1946 冯诺依曼
逻辑元件：电子管
第一代：电子管时代 纸带机编程
第二代：晶体管 开始出现操作系统 开始出现高级语言
第三代：中小规模集成电路 高级语言迅速发展 开始出现分时操作系统
第四代：大规模、超大规模集成电路 出现微处理器、微型计算机、个人计算机PC萌芽 、 操作系统
微处理器的发展：
机器字长：计算机一次整数运算所能处理的二进制位数
摩尔定律：揭示了信息技术进步的速度，集成电路上可容纳的晶体管数目，约每隔18个月就会增加一倍，整体性能也将提升一倍
软件的发展：
机器语言010101=&amp;gt;汇编语言=&amp;gt;FORTRAN/PASCAL/C++=&amp;gt;java、python
DOC操作系统=&amp;gt;windows、android、ios
目前的发展趋势：
两极分化：
1.微型计算机更微型化、网络化、高性能、多用途方向发展
2.巨型化、超高速、并行处理、智能化方向发展
计算机硬件的基本组成：
1.早期冯诺依曼的结构
2.现代计算机的结构
ENIAC手动接线来控制计算
冯诺依曼：”存储程序“的概念是指将指令以二进制代码的形式事先输入计算机的主存储器（内存），然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。
早期冯诺依曼机：
数据/程序：即软件
硬件：
输入设备：将信息转换成机器能识别的形式
存储器：存放数据和程序
运算器：算术运算和逻辑运算
控制器：指挥程序运行
输出设备：将结果转换成人们熟悉的形式
在计算机系统中，软件和硬件在逻辑上是等效的。
冯诺依曼计算机的特点：
计算机由5大部件组成：输入设备、输出设备、存储器、运算器、控制器 指令和数据以同等地位存储于存储器，可按地址寻访 指令和数据用二进制表示 指令由操作码和地址码组成 存储程序 以运算器为中心 输入/输出设备与存储器之间的数据传送通过运算器完成</description>
    </item>
    
    <item>
      <title>江淮蔚来涂装FAS报表过程记录</title>
      <link>https://jianrongma.github.io/p/%E6%B1%9F%E6%B7%AE%E8%94%9A%E6%9D%A5%E6%B6%82%E8%A3%85fas%E6%8A%A5%E8%A1%A8%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 10 Apr 2022 10:31:06 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E6%B1%9F%E6%B7%AE%E8%94%9A%E6%9D%A5%E6%B6%82%E8%A3%85fas%E6%8A%A5%E8%A1%A8%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
      <description>修改需求： 设备报警TOP 第二列加上DvcCd,搜索条件去掉故障说明，表格上方加入柱状图（按DvcCd分组计算）
车身工艺参数 采集名称做下拉框
ANDON 1.Andon拉绳时长top10 --参考安驰报表-当天ANDON停线时长TOP10 select distinct PlineNm--”产线名称“ , sum(cast(SUBSTRING(SLContTm,1,2) as int) )*60+sum( cast(SUBSTRING(SLContTm,4,2) as int))+sum(cast(SUBSTRING(SLContTm,7,2) as int))/60as分--将停线持续时间转换为以“分“为单位 from BPIE_SLDoc --停线日志表 where sLContTm is not null --”持续时间“非空and Enabled=1 and datediff(day,sLStrtTm, &amp;#39;$igetdate} &amp;#39;)=o --将”停线开始时间“转换为参数面板中的查询时间的格式并与之对应group by PlineNm --以”产线名称“分组 order by分DESC --以处避”持续时间“为”分进行排序 查A_AndonManagement_Pro a LEFT JOIN A_AndonInfo_Record b ON a.AndonId =b.AndonId ，按照输入的时间范围以PlinCd分组查询，以累加的时长[AndonDurationTime]排序
Andon的报表可以用产线编号查BBdbR_PlineBase把Enabled=1产线名称查出来作为横坐标
数据结构分析
在停线信息管理过程表中，“持续时间”&amp;ndash;AndonDurationTime 的单位为秒 在查询结果的处理中需要处理为分钟
--SQL语句 无TOP 10 查询版本 --产线名称为横坐标 SELECT DISTINCT PlineNm,SUM(AndonDurationTime)/60 AS 分 FROM A_AndonManagement_Pro a LEFT JOIN BBdbR_PlineBase b ON a.</description>
    </item>
    
    <item>
      <title>leetBook_冲刺攻略</title>
      <link>https://jianrongma.github.io/p/leetbook_%E5%86%B2%E5%88%BA%E6%94%BB%E7%95%A5/</link>
      <pubDate>Mon, 28 Feb 2022 12:11:37 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/leetbook_%E5%86%B2%E5%88%BA%E6%94%BB%E7%95%A5/</guid>
      <description>leetBook_冲刺攻略 image-20220227100312893根据提示的数据范围推定时间复杂度 根据时间复杂度推定算法集合 根据题目特征确定算法
image-20220227100007364没有给出数据范围通常使用枚举 枚举通常是n~nlog(n)的时间复杂度 然后再确定算法集合
image-20220227100056863image-20220228103152097image-20220228103157567</description>
    </item>
    
    <item>
      <title>数据结构与算法学习文档</title>
      <link>https://jianrongma.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sun, 30 Jan 2022 00:22:19 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>数据结构与算法 解决问题方法的效率，跟数据的组织方式有关。
循环和递归
解决问题方法的效率，跟空间的利用效率有关。
image-20210818161452286image-20210818162018882解决问题方法的效率，跟算法的巧妙程度有关
数据结构 数据对象在计算机中的组织方式
逻辑结构：线性结构和树结构、图结构 物理存储结构：数组、链表 数据对象必定与一系列加在其上的操作相关联
完成这些操作所用的方法就是算法
抽象数据类型(Abstract Data Type) 数据类型 数据对象集 数据集合相关联的操作集 抽象：描述数据类型的方法不依赖于具体实现 与存放数据的机器无关 与数据存储的物理结构无关 与实现操作的算法和编程语言均无关 只描述数据对象集和相关操作集是什么，并不涉及如何做到的问题
抽象 image-20210818163548512算法 一个有限指令集 接收一些输入（有些情况下不需要输入） 产生输出 一定在有限步骤之后终止 每一条指令必须 有充分明确的目标，不可以有歧义 计算机能处理的范围之内 描述应不依赖与任何一种计算机语言以及具体的实现手段 image-20210818164049310什么是好算法 空间复杂度sn 根据算法写成的程序在执行时占用存储单元的长度。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。
时间复杂度Tn 根据算法写成的程序在执行时耗费时间的长度。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之年都等不到运行结果。
递归的时候会占用内存，因为递归下一层的时候要暂存上一层的结果
Sn = C*N
image-20210818164648695加减比乘除算的快
image-20210818164842726在分析一般算法的效率时，我们经常关注下面两种复杂度
最坏情况复杂度T worst(n) 平均复杂度T avg(n) 基本上就是第一种：最坏情况复杂度
image-20210818165255964image-20210818165445992image-20210818165457903image-20210818165643710image-20210818165759487image-20210818191956566image-20210818193405280image-20210818193945679image-20210818194726647什么是线性表 多项式表示问题的启示 同一个问题可以有不同的表示（存储）方法 有一类共性问题：有序线性序列的组织和管理 线性表 由同类型数据元素构成有序序列的线性结构
表中元素个数成为线性表的长度 线性表没有元素时，称为空表 表起始位置称表头，表结束位置称表尾 image-20210818195144256链式存储实现</description>
    </item>
    
    <item>
      <title>真会CSharp吗学习文档</title>
      <link>https://jianrongma.github.io/p/%E7%9C%9F%E4%BC%9Acsharp%E5%90%97%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 30 Oct 2021 00:17:57 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/%E7%9C%9F%E4%BC%9Acsharp%E5%90%97%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</guid>
      <description>C#5.0+学习文档 特点：
通用性语言 类型安全 面向对象 目标：生产力
简洁性 表达力 高性能 平台中立，与平台无关
封装、继承、多态
统一的类型系统：
类型 共同的基类 类和接口
class interface 属性property、方法method和事件event
唯一一种函数成员(Function Member):方法(method)
方法还包括：属性(Property)和事件(Event)还有其他的
属性
事件
C#主要是一种面向对象的语言，但是也借用了不少函数式编程的特性
函数可以当做值来对待
委托Delegate 支持纯(purity)模式
避免使用值可变的变量 类型安全
c#主要来说是类型安全的 静态类型 static typing 动态类型 dynamic 强类型 strongly typed language 内存管理
依赖于运行时来执行自动内存管理 CLR:Common Language Runtime (公共语言运行时) GC： Garbage Collector (垃圾收集器) c#没有消灭指针 通常情况下不需要使用指针 unsafe 平台支持
原来c#主要是在window上面运行
现在可以在所有的平台上运行
windows macs linux ios android &amp;hellip; .Net Core
.Net/.Net Core 的核心就是CLR: Comman Language Runtime
CLR和语言无关</description>
    </item>
    
    <item>
      <title>Mysql高级</title>
      <link>https://jianrongma.github.io/p/test-chinese/</link>
      <pubDate>Tue, 12 Oct 2021 19:35:55 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/test-chinese/</guid>
      <description>Mysql高级学习文档 mysql的架构介绍 mysql简介 mysqllinux版安装 mysql配置文件 mysql逻辑架构介绍 mysql存储引擎 索引优化分析 性能下降sql慢是执行时间长还是等待时间长 常见通用的join查询 索引简介 性能分析 索引优化 查询截取分析 查询优化 慢查询日志 批量数据脚本 show profile 全局查询日志 mysql锁机制 锁的分类 主从复制 主从配置 mysql简介 高级mysql 完整的mysql优化
mysql内核 sql优化攻城狮 mysql服务器的优化 各种参数常量设定 查询语句优化 主从复制 软硬件升级 容灾备份 sql编程 mysqllinux版的安装 image-20211012195826053#查看当前ubuntu版本 yourtreedad@yourtreedad:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 20.04.3 LTS Release: 20.04 Codename: focal yourtreedad@yourtreedad:~$ 准备工作
#切换到root账户 yourtreedad@yourtreedad:~$ sudo passwd root New password: Retype new password: passwd: password updated successfully yourtreedad@yourtreedad:~$ su root Password: root@yourtreedad:/home/yourtreedad# #查看电脑里有没有mysql root@yourtreedad:/home/yourtreedad# service mysql status * MySQL is stopped.</description>
    </item>
    
    <item>
      <title>Mysql基础</title>
      <link>https://jianrongma.github.io/p/mysql%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 10 Oct 2021 23:44:44 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/mysql%E5%9F%BA%E7%A1%80/</guid>
      <description>mysql学习文档 一 为什么要学习数据库 二 数据库的相关概念 DBMS DB SQL
三 数据库存储数据的特点 四 初始mysql mysql产品的介绍
mysql产品的安装
mysql服务的启动和停止
mysql服务的登陆和退出
mysql的常见命令和语法规范
五DQL语言的学习 基础查询
条件查询
排序查询
常见函数
分组查询
连接查询
子查询
分页查询
union联合查询
六 DML语言的学习 插入语句
修改语句
删除语句
七 DDL语言的学习 库和表的管理
常见数据类型介绍
常见约束
保存数据的容器:
数组 集合 内存数据 断电就没了
文件 但是文件不好查找
因此把文件做成方便增删改查的软件 对文件进行操作 这样的软件就叫做数据库
数据库的好处 实现数据持久化 使用完整的管理系统统一管理,易于查询 数据库的概念 DB 数据库 database:存储数据的仓库,保存了一系列有组织的数据.
DBMS 数据库管理系统 database management system 数据库是通过dbms创建和操作的容器
常见的数据库管理系统 mysql oracle db2 sqlserver
SQL 结构化查询语言 structure query language :专门用来与数据库通信的语言</description>
    </item>
    
    <item>
      <title>windows服务开发备忘</title>
      <link>https://jianrongma.github.io/p/windows%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E5%A4%87%E5%BF%98/</link>
      <pubDate>Fri, 01 Oct 1999 09:17:59 +0800</pubDate>
      
      <guid>https://jianrongma.github.io/p/windows%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E5%A4%87%E5%BF%98/</guid>
      <description>windows服务开发备忘 先开个窗体来调试试试看
再新增一个service服务进来
修改默认服务名
添加安装程序 修改为本地
image-20210928105412125记得引入日志 并将config文件复制到输出目录
有时候install.bat命令不行可能是系统没有权限
跑服务的时候记得再program里改成服务,别泡成窗体应用了
服务的onstart里需要写的是异步方法或者新开一个线程,否则会出现无法服务进程无法连接到服务控制器上的错误
image-20210928105853916image-20210928105911601接口服务嘛,最好尝试ping一下服务器,服务器畅通才能工作
另外最好对间隔时间做到可配置</description>
    </item>
    
  </channel>
</rss>
